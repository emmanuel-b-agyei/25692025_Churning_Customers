
# -*- coding: utf-8 -*-
"""deployment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AUjtzqyr6lKx3YFnem7HmvbtGijyPSaC
"""
import os
import streamlit as st
import pickle
import pandas as pd
import numpy as np
from sklearn.preprocessing import OneHotEncoder

# Load the trained model
model_path = 'Churning Customers.pkl'

if os.path.exists(model_path):
    model = pickle.load(open(model_path, 'rb'))
else:
    st.write(f"Model file not found at {model_path}")

# Function to predict churn
def predict_churn(input_data):
    prediction = model.predict(input_data)[0]
    return prediction

# Streamlit App
st.title('Customer Churn Prediction App')
st.write('Enter customer details to predict churn.')

# Input fields
gender = st.selectbox('Gender', ['Male', 'Female'])
senior_citizen = st.radio('Senior Citizen', [0, 1])
partner = st.radio('Partner', ['Yes', 'No'])
dependents = st.radio('Dependents', ['Yes', 'No'])
tenure = st.slider('Tenure (months)', min_value=0, max_value=120, step=1)
phone_service = st.selectbox('Phone Service', ['Yes', 'No'])
multiple_lines = st.selectbox('Multiple Lines', ['No phone service', 'No', 'Yes'])
internet_service = st.selectbox('Internet Service', ['DSL', 'Fiber Optic', 'No'])
online_security = st.selectbox('Online Security', ['No', 'Yes', 'No internet service'])
online_backup = st.selectbox('Online Backup', ['No', 'Yes', 'No internet service'])
device_protection = st.selectbox('Device Protection', ['No', 'Yes', 'No internet service'])
tech_support = st.selectbox('Tech Support', ['No', 'Yes', 'No internet service'])
streaming_tv = st.selectbox('Streaming TV', ['No', 'Yes', 'No internet service'])
streaming_movies = st.selectbox('Streaming Movies', ['No', 'Yes', 'No internet service'])
contract = st.selectbox('Contract', ['Month-to-month', 'One year', 'Two year'])
paperless_billing = st.selectbox('Paperless Billing', ['Yes', 'No'])
payment_method = st.selectbox('Payment Method', ['Electronic check', 'Mailed check', 'Bank transfer (automatic)', 'Credit card (automatic)'])
monthly_charges = st.number_input('Monthly Charges', max_value=9999.99, min_value=0.0, step=1.0)
total_charges = st.number_input('Total Charges', max_value=999999.99, min_value=0.0,  step=1.0)

# Transform input to DataFrame
input_df = pd.DataFrame({
    'gender': [gender],
    'SeniorCitizen': [senior_citizen],
    'Partner': [partner],
    'Dependents': [dependents],
    'tenure': [tenure],
    'PhoneService': [phone_service],
    'MultipleLines': [multiple_lines],
    'InternetService': [internet_service],
    'OnlineSecurity': [online_security],
    'OnlineBackup': [online_backup],
    'DeviceProtection': [device_protection],
    'TechSupport': [tech_support],
    'StreamingTV': [streaming_tv],
    'StreamingMovies': [streaming_movies],
    'Contract': [contract],
    'PaperlessBilling': [paperless_billing],
    'PaymentMethod': [payment_method],
    'MonthlyCharges': [monthly_charges],
    'TotalCharges': [total_charges]
})

# encoding categorical variable
numeric_features = input_df.select_dtypes(include = [np.number]).columns
categorical_features = input_df.select_dtypes(exclude = [np.number]).columns

encoder = OneHotEncoder(drop='first', sparse=False)
input_encoded = encoder.fit_transform(input_df[categorical_features])
input_data = np.concatenate((input_df[numeric_features].values, input_encoded), axis=1)


# Function call on button click
if st.button('Predict Churn'):
    prediction = predict_churn(input_data)
    st.write(f'Predicted Churn: {prediction}')

